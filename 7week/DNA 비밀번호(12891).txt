1) 문제 인식
DNA 문자열과 부분 문자열의 길이, A, C, G, T 원소의 최소 포함 개수가 주어졌을 때
각 조건을 만족하는 부분 문자열의 개수를 출력하는 문제입니다.

2) 문제 유형 파악
DNA 문자열과 부분 문자열에 대한 조건이 주어졌을 때, 조건을 만족하는 부분 문자열의 개수를 구하는 문제로
빠른 풀이를 위해 슬라이딩 윈도우 알고리즘을 이용하여 풀이할 수 있습니다.
DNA 문자열과 부분 문자열의 길이, A, C, G, T 원소의 최소 포함 개수를 먼저 입력받아
우선 입력받은 문자열이 조건을 만족하는지 확인한 후,
구간별로 부분 문자열의 조건을 만족하는 경우의 수를 슬라이딩 윈도우로 카운팅하여 출력합니다.

3) 알고리즘(슈도 코드)
import sys
input = sys.stdin.readline
 
s, p = map(int, input().split())
dna = list(input().rstrip())
count = [0, 0, 0, 0]
min_num = list(map(int, input().split()))
start = cnt = 0
end = p

def DNA_count(start, end): # A, C, T, G 개수 세기
    global cnt
    global count

    for i in range(start, end):
        if dna[i] == 'A':
            count[0] += 1
        elif dna[i] == 'C':
            count[1] += 1
        elif dna[i] == 'G':
            count[2] += 1
        else:
            count[3] += 1
    
    # 조건을 만족한다면
    if (count[0] >= min_num[0]) and (count[1] >= min_num[1]) and (count[2] >= min_num[2]) and (count[3] >= min_num[3]):
        cnt += 1

DNA_count(start, end)

for i in range(end, s): # 슬라이딩 윈도우로 탐색
    if dna[i] == 'A':
        count[0] += 1
    elif dna[i] == 'C':
        count[1] += 1
    elif dna[i] == 'G':
        count[2] += 1
    elif dna[i] == 'T':
        count[3] += 1

    # 겹치는 원소가 있을 경우 -1
    if dna[i-p] == 'A':
        count[0] -= 1
    elif dna[i-p] == 'C':
        count[1] -= 1
    elif dna[i-p] == 'G':
        count[2] -= 1
    elif dna[i-p] == 'T':
        count[3] -= 1

    # 조건을 만족한다면
    if (count[0] >= min_num[0]) and (count[1] >= min_num[1]) and (count[2] >= min_num[2]) and (count[3] >= min_num[3]):
        cnt += 1

print(cnt)