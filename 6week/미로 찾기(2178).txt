1) 문제 인식
BFS(너비 우선 탐색) 알고리즘을 이용하여 
그래프의 좌표 (1, 1)에서 좌표 (n, m)으로 이동하는 
최단 경로의 길이를 구하는 문제입니다.

2) 문제 유형 파악
BFS로 현재 좌표에서 상하좌우로 이동할 수 있는지 확인해서
이동이 가능한 경우, 해당 좌표를 queue에 추가해서 계속해서 이동을 하도록 하고
+1한 결과, (1,1)에서 해당 좌표까지 이동하는 경로의 길이를 해당 좌표에 저장하는 방식으로 풀이하면 됩니다.

3) 알고리즘(슈도 코드)
n, m = map(int, input().split())
maze = []

# 배열 입력
for _ in range(n):
    tmp = int(input())
    data = []
    for i in range(m):
        data.insert(0, tmp % 10)
        tmp //= 10
    maze.append(data)

# 상하좌우
dx = [-1, 1, 0, 0]
dy = [ 0, 0,-1, 1]

queue = [[0, 0]] # 시작 좌표

while queue:
    x, y = queue[0][0], queue[0][1]
    del queue[0]

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]

        if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 1:
            queue.append([nx, ny])
            maze[nx][ny] = maze[x][y] + 1

print(maze[n-1][m-1])