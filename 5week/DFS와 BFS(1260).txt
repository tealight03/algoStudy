1) 문제 인식
그래프의 정점 수, 간선 수, 탐색 시작 노드와 각 간선이 연결된 정점을 입력받아
그래프를 저장하고 DFS방식과 BFS방식으로 탐색한 결과를 순서대로 출력하는 문제입니다.

2) 문제 유형 파악
파이썬에서는 이미 리스트가 기본 자료 구조로 존재하기 때문에 이를 이용하여
graph를 연결 리스트로 구현해서 받아온 데이터를 정점별로 저장할 수 있고,
dfs와 bfs를 각각 재귀함수로 구현해서 탐색 결과를 순서대로 출력해주면 됩니다.

3) 알고리즘(슈도 코드)
def dfs(graph, node, visited): # dfs 코드
    visited[node] = True
    print(node, end = " ")
    
    for i in graph[node]:
        if visited[i] == False:
            dfs(graph, i, visited)

def bfs(graph, node, visited): # bfs 코드
    queue = [node]
    visited[node] = True

    while queue:
        node = queue.pop(0)
        print(node, end = " ")

        for i in graph[node]:
            if visited[i] == False:
                queue.append(i)
                visited[i] = True

n, m, v = map(int, input().split())
graph = []

for _ in range(n+1): # graph 리스트 초기화
    graph.append([])

visited = [False] * (n+1)

for _ in range(m): # graph 데이터 삽입
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

for i in range(1, n+1):
    graph[i].sort() # 행별로 정렬

dfs(graph, v, visited)
print()

visited = [False] * (n+1) # visited 초기화
bfs(graph, v, visited)