1) 문제 인식
N * 3 크기의 배열이 주어질 때, 
출발점으로부터 바로 밑에 있는 칸, 그 칸과 접한 칸으로 이동하며 칸에 있는 수를 모두 합할 때
DP를 이용하여 그 값의 최댓값과 최솟값을 구하는 문제입니다.

2) 문제 유형 파악
시작 = ★, N = 3일 때
★
O O X -> 2번째를 선택

  ★
O O O -> 3번째를 선택

    ★
X O O 

이런 방향으로 진행해 나가기 때문에
현재까지 더한 값에서 각 줄의 새 값을 더한 경우
가장 큰 값을 최댓값으로, 가장 작은 값을 최솟값으로 계산하여 출력하면 해결할 수 있습니다.

3) 알고리즘(슈도 코드)
import sys
input = sys.stdin.readline

N = int(input())
dp_max = list(map(int, input().split()))
dp_min = dp_max.copy()

for i in range(1, N):
    a, b, c = map(int, input().split()) # a, b, c 입력
    dp_max = [a + max(dp_max[0], dp_max[1]), b + max(dp_max[0], dp_max[1], dp_max[2]), c + max(dp_max[1], dp_max[2])] # 점의 위치에 따라 따로 계산
    dp_min = [a + min(dp_min[0], dp_min[1]), b + min(dp_min[0], dp_min[1], dp_min[2]), c + min(dp_min[1], dp_min[2])] # 점의 위치에 따라 따로 계산


print(max(dp_max), min(dp_min)) # 최댓값, 최솟값 출력