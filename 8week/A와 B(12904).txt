1) 문제 인식
문자열 s와 t를 입력 받아 문자열 뒤에 'A'를 붙이는 연산, 
문자열 순서를 뒤집어 뒤에 'B'를 붙이는 연산을 n번 행해서 
문자열 s를 t로 만들 수 있는지를 확인하여 가능할 경우 1을, 불가능할 경우 0을 출력하는 문제입니다.

2) 문제 유형 파악
DP의 탑-다운 방식을 이용해서 t를 s로 만들 수 있는지 판단하는 방식으로
문제를 풀이할 수 있습니다. 그렇다면 문자열 뒤에 'A'를 붙이는 연산은
문자열 뒤에 'A'가 있을 경우 'A'를 삭제하는 연산으로, 문자열 순서를 뒤집어 뒤에 'B'를 붙이는 연산은
문자열 뒤에 'B'가 있을 경우 'B'를 삭제하고 문자열 순서를 뒤집는 연산으로 바꾸어 알고리즘을 구성할 수 있습니다.
t의 길이가 0이 아닐 경우 연산을 계속 반복하도록 하여
그 결과가 맞다면 1, 거짓이라면 0을 출력하도록 합니다.


3) 알고리즘(슈도 코드)
import sys
input = sys.stdin.readline

s = list(input().rstrip()) # s 입력
t = list(input().rstrip()) # t 입력

flag = 0

while t: # t의 길이가 0이 아닐 때
    if t[-1] == 'A':
        t.pop()
    elif t[-1] == 'B':
        t.pop()
        t.reverse()
    if s == t:
        flag = 1
        break

print(flag)