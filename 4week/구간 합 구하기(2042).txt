1) 문제 인식
트리의 요소 수 n, 데이터 변경 횟수 m, 구간 합 연산 횟수 k를 입력받아서
n개의 요소를 트리 형태로 저장하여 (m+k-1)개 줄만큼 입력되는 a, b, c의 각 값에 따라
a가 1인 경우 b번째 수를 c로 바꾸고, a가 2인 경우 b번째 수부터 c번째 수까지의 구간 합을 k번 연산하는 문제입니다.

2) 문제 유형 파악
시간 제한, 자료구조의 특성상 풀이에 세그먼트 트리가 적절하기 때문에 세그먼트 트리를 이용하여
각 요소를 구간 별로 나눠 후위 순회하는 형태로 데이터를 저장 및 수정하고 빠르게 구간 합을 출력하는 문제 유형입니다.

3) 알고리즘(슈도 코드)
#include <stdio.h>

long long arr[1000000];
long long tree[4000000];

long long MakeSegmentTree(int start, int end, int node) { // 트리 생성
	if (start == end) // 재귀 종료 조건
		return tree[node]=arr[start];

	int mid = (start + end) / 2; // 중간값 설정
	tree[node] =  MakeSegmentTree(start, mid, node * 2) + MakeSegmentTree(mid + 1, end, node * 2 + 1); 
	// 왼쪽 트리 반환 값 + 오른쪽 트리 반환 값 저장
	return tree[node]; // 세그먼트 트리 반환
}

// 구간합 함수
long long sum(int start, int end, int node, int left, int right) {
	if (start > right || end < left) // 탐색 범위가 완전히 벗어난 경우
		return 0;
	if (left <= start && end <= right) // 탐색 범위가 완전히 속한 경우
		return tree[node];

	/* 탐색 범위가 위 두 경우를 제외하고 일부만 걸치는 경우 */
	int mid = (start + end) / 2;
	
	return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);
}

long long UpdateSegmentTree(int start, int end, int node, int index, long long diff) {
	if (index < start || index > end) // 범위를 벗어난 경우
		return 0;

	tree[node] += diff; // 트리 노드 업데이트
	
	if (start == end) // 재귀 종료 조건
		return 0;

	int mid = (start + end) / 2;
	UpdateSegmentTree(start, mid, node * 2, index, diff);
	UpdateSegmentTree(mid + 1, end, node * 2 + 1, index, diff);
}

int main() {
	int n, x, y;
	scanf("%d %d %d", &n,&x,&y);

	for (int i = 0; i < n; i++) {
		scanf("%lld", &arr[i]);
	}

	MakeSegmentTree(0, n - 1, 1);
	int cnt = x + y;
	for (int i = 0; i < cnt; i++) {
		long long a, b, c;
		scanf("%lld %lld %lld", &a, &b, &c);
		if (a == 1) {
			UpdateSegmentTree(0, n - 1, 1, b - 1, c - arr[b - 1]);
			arr[b - 1] = c; // 배열 요소 업데이트 
		}
		else {
			printf("%lld\n", sum(0, n - 1, 1, b - 1, c - 1)); // 구간합 출력
		}
	}

	return 0;
}